#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Formats numbers as bar-charts for use in i3bar status lines.

import argparse
import re
import math
import string
import sys

LEFT_BAR  = u'▏'
RIGHT_BAR = u'▕'
VERTICAL_FILL   = u' ▁▂▃▄▅▆▇█'


def roundToVerticalBar(fraction):
  """ Fetches the closest bar character for the given fraction. """
  # Prevent non-positive values.
  fraction = min(1, max(0.001, fraction))
  # We always want bar graphs to show at least a sliver along the bottom. So
  # we round up to the next fraction of 8.
  index = int(math.ceil(fraction * 8))
  return VERTICAL_FILL[index]

  
def stripNonDigits(text):
  """ Strips non-digit characters from the beginning and end of text. """
  begin = 0
  end = len(text) - 1
  while begin <= end and not text[begin].isdigit():
    begin += 1
  while begin <= end and not text[end].isdigit():
    end -= 1
  return text[begin:end+1]


def loadHistory(history_id):
  try:
    with open('/dev/shm/percent2bar-%s' % history_id, 'r') as f:
      return unicode(f.read(), 'utf-8')
  except IOError:
    # Ignore file-not-found.
    return ''


def saveHistory(history_id, text):
  with open('/dev/shm/percent2bar-%s' % history_id, 'w') as f:
    f.write(text.encode('utf-8'))


# Pattern for matching percentages. Note the leading and trailing spaces.
percentagePattern = re.compile(r' *[0-9]+(\.[0-9]*)?\% *')

def replacePercentageWithBar(text, label, keep_number, history, history_id):
  """ Replaces each occurrence of a percentage (like XXX%) in 'text'
  with a bar-graph that represents the same quantity. Assumes that all
  percentages in the string have the same value.
  """
  m = re.search(percentagePattern, text)
  if m is None:
    return text
  percentageText = m.group(0)

  percent = float(stripNonDigits(percentageText))
  fraction = percent * 0.01

  # Keep the percentage to 2 digits.
  percent = int(percent)
  if percent > 99:
    percent = 99

  bar = roundToVerticalBar(fraction)
  barGraph = label

  if history > 1 and len(history_id) > 0:
    historicalGraph = loadHistory(history_id)
    historicalGraph += bar

    while len(historicalGraph) < history:
      historicalGraph = ' ' + historicalGraph
    while len(historicalGraph) > history:
      historicalGraph = historicalGraph[1:]

    saveHistory(history_id, historicalGraph)
    barGraph += historicalGraph
  else:
    barGraph += RIGHT_BAR + bar

  barGraph += LEFT_BAR

  if keep_number:
    barGraph += '%02d%%' % percent

  return string.replace(text, percentageText, barGraph)


if __name__ == '__main__':
  arg_parser = argparse.ArgumentParser()
  arg_parser.add_argument('--label',
                          help='Label to prepend to each bar.')
  arg_parser.add_argument('--keep_number',
                          help='If set, keep the numerical percentage too.')
  arg_parser.add_argument('--history', type=int,
                          help='If positive, show a historical bar chart with '
                               'this many bars.')
  arg_parser.add_argument('--history_id',
                          help='A unique ID for history storage.')
  args = arg_parser.parse_args()

  label = ''
  if args.label:
    label = unicode(args.label, 'utf-8')

  keep_number = False
  if args.keep_number:
    keep_number = True

  history = 0
  if args.history:
    history = args.history

  history_id = ''
  if args.history_id:
    history_id = args.history_id

  text = sys.stdin.read()
  text = unicode(text, 'utf-8')

  text = replacePercentageWithBar(text, label, keep_number, history, history_id)

  text = text.encode('utf-8')
  sys.stdout.write(text)
