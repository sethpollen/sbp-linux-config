#!/bin/sh
# 
# Main entry point from my graphical shell (i3) to applications. Every
# application I invoke from i3 needs to have my environment variables from
# ~/.profile, and its output needs to go into ~/log for debugging.
#
# Executes the command given by the vector of command-line args, logging
# stderr and stdout to a log file in ~/log. The name of the log file is
# constructed from the command string. Unfortunately, this command does not
# preserve the exit status of the nested command.

# Source standard environment variables.
tmp="$(mktemp)"
~/bin/sbp-environment > "$tmp"
. "$tmp"
rm "$tmp"

LOG_ROOT="${HOME}/log"
mkdir -p "$LOG_ROOT"

cmd="$@"

# Construct a filename-safe version of the command string, to be used in the
# logfile path.
cmd_joined=$(printf -- "-%s" "${cmd[@]}")
cmd_joined=${cmd_joined:1}
cmd_joined="${cmd_joined//[^A-Za-z0-9_\\-\\.]/-}"

log_path="${LOG_ROOT}/${cmd_joined}.log"

# Invoke the desired command, redirecting stderr and stdout to the log file.
#
# TODO: dumping stderr into stdout here breaks i3status-wrapper. The best
# approach might be to reimplement this whole file in Go.
$cmd 2>&1 | tee "${log_path}"

