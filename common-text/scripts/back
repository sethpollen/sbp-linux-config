#!/usr/bin/env fish
#
# `back` is my lightweight tmux replacement. It gets much of its functionality
# from `dtach`, but additionally saves the output of detached commands for
# later viewing.

# -k or --kill will cause `join` to forcibly terminate the job with SIGTERM.
# -p or --peek will prevent `join` from cleaning up the output file, even if
#    the job has terminated.
# -s or --nostar will cause `ls` to not print a star by any completed jobs. 
# -l or --noless will disable 'less' and instead just use 'cat' to display
#    job output for the 'join' subcommand.
argparse --name=back 'k/kill' 's/nostar' 'p/peek' 'l/noles' -- $argv
or exit

set home ~/.back
mkdir -p $home
or exit

set subcmds fork join ls

if test (count $argv) -lt 1
  echo "No subcommand. Try one of these:"
  echo "  $subcmds"
  exit 1
end
set subcmd $argv[1]
set argv $argv[2..-1]

if not contains $subcmd $subcmds
  echo "Unrecognized subcommand:" $subcmd
  exit 1
end

# ls: Print a newline-separated list of unjoined jobs. Usage:
#   back ls
if test $subcmd = "ls"
  set jobs (find $home -maxdepth 1 -path "$home/*" -printf "%f\n")

  # Sort the jobs into two sets.
  set starred
  set unstarred

  for job in $jobs
    # If there is no socket, then dtach has finished.
    if not test -e "$home/$job/socket"
      if test -n "$_flag_nostar"
        set starred $starred $job
      else
        set starred $starred "$job *"
      end
    else
      set unstarred $unstarred $job
    end
  end

  # Print out starred jobs first (sorted), then unstarred jobs (sorted).
  # This allows my shell prompt to accept just the first line and know whether
  # anything is starred. It also makes the completion suggests for "back join"
  # more useful.
  function print_sorted
    for i in $argv
      echo $i
    end | sort
  end
  print_sorted $starred
  print_sorted $unstarred

  exit
end

# All other commands take a job name.
if test (count $argv) -lt 1
  echo "Missing job name"
  exit 1
end
set job $argv[1]
set argv $argv[2..-1]

set job_home "$home/$job"
set output "$job_home/output"
set socket "$job_home/socket"
set dtach dtach -n $socket

# fork: Spawn a new detached job. Usage:
#   back fork <job_name> <command...>
if test $subcmd = "fork"
  if test (count $argv) -lt 1
    echo "No command to run"
    exit 1
  end

  if not mkdir $job_home 2>/dev/null
    echo "Job name already in use:" $job
    exit 2
  end

  # Make sure the output file exists, even if the dtach process dies before
  # it writes anything there.
  touch $output
  or exit

  set prompt "sbp-prompt --width=$COLUMNS --output=fish_prompt"
  set echo_program "echo \"$argv\""
  # We wrap the program in fish twice. The inner fish call makes sure that
  # we don't get any weird syntax interaction with the command.
  set invoke "fish -c \"$argv\""
  set redirects "</dev/null >\"$output\" 2>&1"

  $dtach -E \
    fish -c "
      begin
        $prompt
        set_color $fish_color_command
        $echo_program
        set_color normal
        $invoke
        $prompt --exit_code=\$status --dollar=false
      end $redirects"
  exit
end

# The subcmd must be "join". It takes no more arguments.
if test (count $argv) -gt 0
  echo "Extra arguments:" $argv
  exit 1
end

# Join requires the job to exist (even if it has completed).
if not test -d $job_home
  echo "Job does not exist:" $job
  exit 2
end

# Obey the --kill flag.
if test -n "$_flag_kill"
  # Kill any dtach process pointed at our socket. There should be at most
  # one (the detached process itself).
  if pkill --full "$dtach"
    # Wait for the job to truly exit.
    while pgrep --full "$dtach"
      sleep 0.01
    end
    echo "Job killed:" $job
  else
    echo "Job already dead:" $job
  end
end

# We will only clean up the job if it exited before we show its output to the
# user. We check whether the job has exited by checking for the dtach socket,
# since dtach always deletes the socket when it quits.
set cleanup yes
if test -e $socket
  echo "Job still running:" $job
  set cleanup
end
if test -n "$_flag_peek"
  # The user asked us not to clean up.
  set cleanup
end

if test -n "$_flag_noless"
  cat $output
else
  # Tell less to show ANSI colors. The +G causes less to scroll to the end of
  # the file right away.
  less +G --RAW-CONTROL-CHARS $output
end

if test -n "$cleanup"
  rm $output
  and rmdir $job_home

  # Exit normally.
  exit
end

# We couldn't clean up because the job is still running. Exit with a failed
# status.
exit 255
